# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
str(a)
Data
PutData
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[j] <- putList(value[j], Data[j], i)
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
str(a)
class(a) <- "hm.list"
str(a)
a[1] <- a[2]
value[j]
Data[j]
putList(value[j], Data[j], i)
PutData
Data
Data[j]
i
j
putList(value[j], Data[j], i)
PutData
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[j] <- putList(Data[j], i, value[j])
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data
value
i
Data[j]
value[j]
value
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data[j]
value[j]
Data
PutData
INa
DaNa
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
for(j in INa){
dimN <- length(dim(Data[[j]]))
if(dimN == 2) Data[[j]][i,] <- PutData[[j]]
else if(dimN == 3) Data[[j]][i,,] <- PutData[[j]]
else Data[[j]][i] <- PutData[[j]]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[[j]] <- putList(Data[[j]], i, value[[j]])
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data[[j]]
value[[j]]
Data
PutData
INa
str(a)
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
a[1]
a[[1]]
class(a) <- "hm.list"
a[1]
document()
library(devtools)
document()
library(HMtools)
library(devtools)
document()
library(HMtools)
document()
document()
library(HMtools)
document()
library(HMtools)
rasterToPoints
cut
library(devtools)
document()
document()
document()
document()
document()
document()
library(HMtools)
library(HMtools)
library(HMtools)
library(HMtools)
fctNextGrid
library(devtools)
document()
library(HMtools)
fctNextGrid
library(devtools)
document()
document()
document()
library(HMtools)
remove.packages("PackageDemo")
install.packages("devtools")
# install.packages("devtools")
library(devtools)
install_github("IWMHUST/PackageDemo")
library(PackageDemo)
sayHello()
sayHello("lk")
detach("package:PackageDemo", unload = TRUE)
a <- setClass("a",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
b <- setClass("b",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"),
contains = "a")
mya <- a()
myb <- b()
aa <- setClass("aa",
slots = c(mya = "a"))
bb <- setClass("bb",
slots = c(mya = "b",
myb = "a"),
contains = "aa")
mybb <- bb()
dd <- setClass("dd",
slots = c(mya = "b",
myb = "a"))
mydd <- dd()
d <- setClass("d",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"))
e <- setClass("e",
slots = c(RainFall = "array",
SnowFall = "array"))
dd <- setClass("dd",
slots = c(mya = "e",
myb = "a"))
myee <- ee()
myee <- dd()
bb <- setClass("bb",
slots = c(mya = "e",
myb = "a"),
contains = "aa")
bb <- setClass("bb",
slots = c(mya = "e",
myb = "a"),
contains = "aa")
slotNames(a)
slotNames(a)[-1]
slotNames(mya)[-1]
slotNames(mya)
getSlots(a)
a <- setClass("a",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
getSlots(a)
getSlots("a")
c(getSlots("a"), getSlots("e"))
setClass("f",
slots = c(getSlots("a"), getSlots("e")))
myf <- f()
f <- setClass("f",
slots = c(getSlots("a"), getSlots("e")))
myf <- f()
getSlots("aa")
str(getSlots("aa"))
(getSlots("aa"))[1]
(getSlots("aa"))[1,1]
a1 <- setClass("a1",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
a2 <- setClass("a2",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"))
b <- setClass("b",
slots = c(Pr = "array",
Ra = "array"))
d <- setClass("d",
slots = c(Prec = "array",
Rain = "array",
Snow = "array"))
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
bb <- setClass("bb",
slots = c(a = "a2",
d = "d"))
aabb <- setClass("aabb",
slots = c(getSlots("aa"), getSlots("bb")))
unique(c(getSlots("aa"), getSlots("bb")))
c(getSlots("aa"), getSlots("bb"))
union(c(getSlots("aa"), getSlots("bb")))
names(c(getSlots("aa"), getSlots("bb")))
Ori <- aa
New <- bb
cName <- "aabb"
OrSl <- getSlots(Ori)
aa
Ori = aa
OrSl <- getSlots(Ori)
OrSl <- getSlots(aa)
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
bb <- setClass("bb",
slots = c(a = "a2",
d = "d"))
names(c(getSlots("aa"), getSlots("bb")))
Ori = aa
New <- bb
OrSl <- getSlots(aa)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
getSlots(aa)
getSlots("aa")
getSlots(aa)
Ori <- "aa"
New <- "bb"
OrSl <- getSlots(aa)
NeSl <- getSlots(New)
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
INa
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DONa
DNNa
DiffSl <- c(OrSl[INa], NeSl[INa])
DiffSl
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
DiffSl
INa
ISl <- c(OrSl[INa], NeSl[INa])
ISl
ISl <- rbind(OrSl[INa], NeSl[INa])
ISl
ISl[INa,1]
INa
a12 <- setClass("a12",
slots = mergeSlots("a1","a2"))
mergeSlots <- function(Ori, New){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
return(c(OrSl[DONa], NeSl))
}
a12 <- setClass("a12",
slots = mergeSlots("a1","a2"))
getSlots("a12")
mergeClass <- function(Ori, New, cName){
return(setClass(cName,
slots = mergeSlots(Ori,New)))
}
a12 <- mergeClass("a1", "a2", "a12")
getSlots("a12")
a21 <- mergeClass("a2", "a1", "a21")
getSlots("a21")
Ori <- "aa"
New <- "bb"
cName <- "aabb"
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
parse(text = INa[i]) <- mergeClass(ISl[1,i], ISl[2,i], INa[i])
}
parse(text = INa[i])
for (i in 1:length(INa)) {
eval(parse(text = INa[i])) <- mergeClass(ISl[1,i], ISl[2,i], INa[i])
}
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
IntSl <- INa
names(IntSl) <- INa
IntSl
mergeSubClass <- function(Ori, New, cName){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
IntSl <- INa
names(IntSl) <- INa
return(setClass(cName,
slots = c(Ori,DiffSl)))
}
aabb <- mergeSubClass("aa", "bb", "aabb")
c(Ori,DiffSl)
mergeSubClass <- function(Ori, New, cName){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
# IntSl <- INa
names(INa) <- INa
return(setClass(cName,
slots = c(INa,DiffSl)))
}
aabb <- mergeSubClass("aa", "bb", "aabb")
myaabb <- aabb()
aab <- setClassUnion("aab", c("aa","bb"))
myaab <- aab
str(myaab)
aab <- setClassUnion("aab", c("aa","bb"))
myaab <- aab
str(myaab)
myaab <- aab()
#' @title HM.Data s4 class
#' @importFrom methods new
#' @export HM.Null
HM.Null <- setClass("HM.Null")
#' @title EvaTrans s4 class
#' @importFrom methods new
#' @export EvaTrans
Evatrans <- setClass("ET",
slots = c(RET = "array",
ET = "array",
Transpiration = "array",
Evaporation = "array",
EvaporationCanopy = "array",
EvaporationLand = "array"))
library(devtools)
document()
document()
document()
document()
document()
library(HMtools)
detach("package:HMtools", unload = TRUE)
