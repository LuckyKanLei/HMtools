library(HMtools)
library(HMtools)
fctNextGrid
library(devtools)
document()
library(HMtools)
fctNextGrid
library(devtools)
document()
document()
document()
library(HMtools)
remove.packages("PackageDemo")
install.packages("devtools")
# install.packages("devtools")
library(devtools)
install_github("IWMHUST/PackageDemo")
library(PackageDemo)
sayHello()
sayHello("lk")
detach("package:PackageDemo", unload = TRUE)
a <- setClass("a",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
b <- setClass("b",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"),
contains = "a")
mya <- a()
myb <- b()
aa <- setClass("aa",
slots = c(mya = "a"))
bb <- setClass("bb",
slots = c(mya = "b",
myb = "a"),
contains = "aa")
mybb <- bb()
dd <- setClass("dd",
slots = c(mya = "b",
myb = "a"))
mydd <- dd()
d <- setClass("d",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"))
e <- setClass("e",
slots = c(RainFall = "array",
SnowFall = "array"))
dd <- setClass("dd",
slots = c(mya = "e",
myb = "a"))
myee <- ee()
myee <- dd()
bb <- setClass("bb",
slots = c(mya = "e",
myb = "a"),
contains = "aa")
bb <- setClass("bb",
slots = c(mya = "e",
myb = "a"),
contains = "aa")
slotNames(a)
slotNames(a)[-1]
slotNames(mya)[-1]
slotNames(mya)
getSlots(a)
a <- setClass("a",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
getSlots(a)
getSlots("a")
c(getSlots("a"), getSlots("e"))
setClass("f",
slots = c(getSlots("a"), getSlots("e")))
myf <- f()
f <- setClass("f",
slots = c(getSlots("a"), getSlots("e")))
myf <- f()
getSlots("aa")
str(getSlots("aa"))
(getSlots("aa"))[1]
(getSlots("aa"))[1,1]
a1 <- setClass("a1",
slots = c(Precipitation = "array",
VegVaporFlux = "array"))
a2 <- setClass("a2",
slots = c(Precipitation = "array",
RainFall = "array",
SnowFall = "array"))
b <- setClass("b",
slots = c(Pr = "array",
Ra = "array"))
d <- setClass("d",
slots = c(Prec = "array",
Rain = "array",
Snow = "array"))
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
bb <- setClass("bb",
slots = c(a = "a2",
d = "d"))
aabb <- setClass("aabb",
slots = c(getSlots("aa"), getSlots("bb")))
unique(c(getSlots("aa"), getSlots("bb")))
c(getSlots("aa"), getSlots("bb"))
union(c(getSlots("aa"), getSlots("bb")))
names(c(getSlots("aa"), getSlots("bb")))
Ori <- aa
New <- bb
cName <- "aabb"
OrSl <- getSlots(Ori)
aa
Ori = aa
OrSl <- getSlots(Ori)
OrSl <- getSlots(aa)
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
bb <- setClass("bb",
slots = c(a = "a2",
d = "d"))
names(c(getSlots("aa"), getSlots("bb")))
Ori = aa
New <- bb
OrSl <- getSlots(aa)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
aa <- setClass("aa",
slots = c(a = "a1",
b = "b"))
getSlots(aa)
getSlots("aa")
getSlots(aa)
Ori <- "aa"
New <- "bb"
OrSl <- getSlots(aa)
NeSl <- getSlots(New)
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
INa
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DONa
DNNa
DiffSl <- c(OrSl[INa], NeSl[INa])
DiffSl
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
DiffSl
INa
ISl <- c(OrSl[INa], NeSl[INa])
ISl
ISl <- rbind(OrSl[INa], NeSl[INa])
ISl
ISl[INa,1]
INa
a12 <- setClass("a12",
slots = mergeSlots("a1","a2"))
mergeSlots <- function(Ori, New){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
return(c(OrSl[DONa], NeSl))
}
a12 <- setClass("a12",
slots = mergeSlots("a1","a2"))
getSlots("a12")
mergeClass <- function(Ori, New, cName){
return(setClass(cName,
slots = mergeSlots(Ori,New)))
}
a12 <- mergeClass("a1", "a2", "a12")
getSlots("a12")
a21 <- mergeClass("a2", "a1", "a21")
getSlots("a21")
Ori <- "aa"
New <- "bb"
cName <- "aabb"
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
parse(text = INa[i]) <- mergeClass(ISl[1,i], ISl[2,i], INa[i])
}
parse(text = INa[i])
for (i in 1:length(INa)) {
eval(parse(text = INa[i])) <- mergeClass(ISl[1,i], ISl[2,i], INa[i])
}
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
IntSl <- INa
names(IntSl) <- INa
IntSl
mergeSubClass <- function(Ori, New, cName){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
IntSl <- INa
names(IntSl) <- INa
return(setClass(cName,
slots = c(Ori,DiffSl)))
}
aabb <- mergeSubClass("aa", "bb", "aabb")
c(Ori,DiffSl)
mergeSubClass <- function(Ori, New, cName){
OrSl <- getSlots(Ori)
OrNa <- names(OrSl)
NeSl <- getSlots(New)
NeNa <- names(NeSl)
INa <- intersect(OrNa, NeNa)
ISl <- rbind(OrSl[INa], NeSl[INa])
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
DiffSl <- c(OrSl[DONa], NeSl[DNNa])
for (i in 1:length(INa)) {
eval(parse(text = paste0(INa[i], " <- mergeClass(ISl[1,i], ISl[2,i], INa[i])")))
}
# IntSl <- INa
names(INa) <- INa
return(setClass(cName,
slots = c(INa,DiffSl)))
}
aabb <- mergeSubClass("aa", "bb", "aabb")
myaabb <- aabb()
aab <- setClassUnion("aab", c("aa","bb"))
myaab <- aab
str(myaab)
aab <- setClassUnion("aab", c("aa","bb"))
myaab <- aab
str(myaab)
myaab <- aab()
#' @title HM.Data s4 class
#' @importFrom methods new
#' @export HM.Null
HM.Null <- setClass("HM.Null")
#' @title EvaTrans s4 class
#' @importFrom methods new
#' @export EvaTrans
Evatrans <- setClass("ET",
slots = c(RET = "array",
ET = "array",
Transpiration = "array",
Evaporation = "array",
EvaporationCanopy = "array",
EvaporationLand = "array"))
library(devtools)
document()
document()
document()
document()
document()
library(HMtools)
detach("package:HMtools", unload = TRUE)
#' @title hm.list s4 class
#' @importFrom methods new
#' @export hm.list
hm.list <- setClass("hm.list", contains = "list")
a <- hm.list(a = 1, b = 2)
a <- list(a = 1, b = 2)
a
list
class(list)
hm.list <- function(...){
hmlist <- list(...)
class(hmlist) <- "hm.list"
return(hmlist)
}
#' @title hm.list s4 class
#' @importFrom methods new
#' @export hm.list
hm.list <- setClass("hm.list", contains = "list")
mylist <- hm.list()
mylist <- hm.list(a = 1, b = 2)
hm.list <- function(...){
hmlist <- list(...)
class(hmlist) <- "hm.list"
return(hmlist)
}
mylist <- hm.list(a = 1, b = 2)
mylist
hm.list <- setClass("hm.list", contains = "list")
mylist <- hm.list()
mylist$a <- 1
mylist$b <- 2
mylist
names(mylist)
class(mylist)
t_vari.array
#' @title t_vari.array s4 class
#' @importFrom methods new
#' @export t_vari.array
t_vari.array <- setClass("t_vari.array", contains = "array")
t_vari.array
array(1:6, c(3,2))
t_vari.array(1:6, c(3,2))
hm.list
a <- list(a = 1, b = 2)
a <- hm.list(a = 1, b = 2)
a <- hm.list(list(a = 1, b = 2))
a
#' @title hm.list s4 class
#' @importFrom methods new
#' @export hm.list
hm.list <- setClass("hm.list", contains = "list")
a <- hm.list(list(a = 1, b = 2))
a
t_vari.array
paste0("Data[1", rep(",", dimN), "]")
dimN <- 2
paste0("Data[1", rep(",", dimN), "]")
paste0("Data[1", rep(",", dimN - 1), "]", collapse = NULL)
dimN <- 3
paste0("Data[1", rep(",", dimN - 1), "]", collapse = NULL)
paste0("Data[1", rep(",", dimN - 1), "]", recycle0 = T)
paste0("Data[1", rep(",", dimN - 1), "]", collapse = ",")
rep(",", dimN - 1)
paste0("Data[1", paste0(rep(",", dimN - 1)), "]", collapse = ",")
paste0("Data[1", rep(",", dimN - 1), "]", collapse = NULL)
paste("Data[1", rep(",", dimN - 1), "]")
paste("Data[1", c(rep(",", dimN - 1)), "]")
paste("Data[1", c(rep(",", dimN - 1)), "]",collapse = NULL)
paste("Data[1", c(rep(",", dimN - 1)), "]",collapse = "NULL")
paste("Data[1", c(rep(",", dimN - 1)), "]",collapse = " ")
spilt("Data[1", rep(",", dimN - 1), "]")
split("Data[1", rep(",", dimN - 1), "]")
rep(",", dimN - 1)
paste( rep(",", dimN - 1), "]")
paste( rep(",", dimN - 1), "]", collapse = "")
paste( rep(",", dimN - 1), "]", collapse = " ")
paste( strrep(",", dimN - 1), "]", collapse = " ")
paste("Data[1", strrep(",", dimN - 1), "]")
'[t[.t_vari.array' <- function(Data, i){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[1", strrep(",", dimN - 1), "]")))
}
a <- t_vari.array(1:6, c(2,3))
a[t[1]]
[t[a]]
'[[.t_vari.array' <- function(Data, i){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[1", strrep(",", dimN - 1), "]")))
}
a[[1]]
a <- t_vari.array(1:24, c(2,3,4))
a[[1]]
#' @title subsetting for HM.Data
#' @description Extract the data
#' @importFrom  purrr map
#' @param Data array in class t_vari.array
#' @param i index
#' @return Locat whith the required data
#' @export
'[[.t_vari.array' <- function(Data, i){
dimN <- length(dim(Data))
return(eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "]"))))
}
a[[2]]
'[[<-.t_vari.array' <- function(Data, i, Value){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "] <- Value")))
return(Data)
}
a[[2]] <- 0
'[[<-.t_vari.array' <- function(Data, i, Value){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "] <- Value")))
return(Data)
}
a[[2]] <- 0
a[[2]]
'[[<-.t_vari.array' <- function(Data, i, Value){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "] <- Value")))
return(Data)
}
a[[2]] <- 0
'[[<-.t_vari.array' <- function(Data, i, value){
dimN <- length(dim(Data))
eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "] <- value")))
return(Data)
}
a[[2]] <- 0
a
a[[2]]
b <- list(a = 1, b = 2)
b[1]
'@.t_vari.array' <- function(Data, i){
dimN <- length(dim(Data))
return(eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "]"))))
}
a@2
a
a@2@
'{.t_vari.array' <- function(Data, i){
dimN <- length(dim(Data))
return(eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "]"))))
}
a{2}
a <- t_vari.array(1:24, c(2,3,4))
a{2}
a[[2]]
#' @title subsetting for HM.Data
#' @description Extract the data
#' @importFrom  purrr map
#' @param Data array in class t_vari.array
#' @param i index
#' @return Locat whith the required data
#' @export
getI_t_vari.array <- function(Data, i){
dimN <- length(dim(Data))
return(eval(parse(text = paste0("Data[", i, strrep(",", dimN - 1), "]"))))
}
#' @title subsetting for HM.Data
#' @description Extract the data
#' @importFrom  purrr map
#' @param Data array in class t_vari.array
#' @param i index
#' @return Locat whith the required data
#' @export
'[[.t_vari.array' <- getI_t_vari.array
a <- t_vari.array(1:24, c(2,3,4))
#' @title t_vari.array s4 class
#' @importFrom methods new
#' @export t_vari.array
t_vari.array <- setClass("t_vari.array", contains = "array")
a <- t_vari.array(1:24, c(2,3,4))
a[[2]]
library(devtools)
document()
#' @title merge_sub_list
#' @description merge the data from Ori and New bei elments names
#' @param Ori the original data
#' @param New the new data
#' @return a data merged from Ori and New
#' @export
merge_sub_list <- function(Ori, New){
OrNa <- names(Ori)
NeNa <- names(New)
INa <- intersect(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
for (i in NeNa) {
Ori[[i]] <- New[[i]]
}
return(Ori)
}
a <- list(a = 1, b = 2)
b <- list(d = 3, b = 4)
merge_sub_list(a,b)
merge_sub_list(b,a)
#' @title mergeData
#' @description merge the data from Ori and New bei elments names
#' @param Ori the original data
#' @param New the new data
#' @return a data merged from Ori and New
#' @export
mergeData.hm.list <- function(Ori, New){
OrNa <- names(Ori)
NeNa <- names(New)
INa <- intersect(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
for (i in DNNa) {
Ori[[i]] <- New[[i]]
}
for(i in INa){
Ori[[i]] <- merge_sub_list(Ori[[i]], New[[i]])
}
return(Ori)
}
aa <- list(a = a, b = b)
bb <- list(a = b, b = list(d = 1, e = 2))
mergeData.hm.list(aa,bb)
bb <- list(a = b, b = list(d = 1, e = 2), c = a)
mergeData.hm.list(aa,bb)
library(devtools)
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
