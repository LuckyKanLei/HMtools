#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
PutData <- PutData[indexPI]
Out <- map(PutData, putList, Data, i)
class(Out) <- class(Data)
return(Out)
}
aa
aa
aa <- a
aa[2] <- b
aa
b
[<-.data.frame
'[<-.data.frame'
'[.hm.list'
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
aa <- a
aa[2] <- b
aa[2]
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
phm(aa,2,b)
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
phm(aa,2,b)
Data <- aa
i = 2
PutData <- b
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
INa
j = 1
paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")
eval(parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
parse(paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
aa[2] <- b
aa[2] <-
b
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
aa
aa[2] <- b
aa[2] <- b
'[<-.hm.list'
aa
aa[2] <- b
document()
'['
force('[')
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(i, value){
Data <- `*tmp*`
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
aa[2] <- b
my <- setClass("my")
my <- setClass("my")
'[<-.my' <- function(x, i, value){
return(x + i + value)
}
mya <- my()
my <- setClass("my", contains = "numic")
my <- setClass("my", contains = "matrix")
mya <- my(1:2)
mya[1]
mya[1] <- 2
mya
mya[1]
mya[1] <- -9
mya
my <- setClass("my", contains = "matrix")
'[<-.my' <- function(x, i, value){
x[i] <- x[i] + value
return(x)
}
mya <- my(1:2)
mya[1] <- -9
mya[1]
mya
mya[1] <- -9
'[<-.my' <- function(x, i, value){
x[i] <- x + value
return(x)
}
mya[1] <- -9
'[<-.my' <- function(x, i, value){
x[i] <- 1 + value
return(x)
}
mya[1] <- -9
'[<-.my' <- function(x, i, value){
x <- 1 + value
return(x)
}
mya[1] <- -9
mya
mya <- my(1:2)
mya
mya[1] <- -9
mya
'[<-.my' <- function(x, i, value){
x <- x[1] + value
return(x)
}
mya <- my(1:2)
mya[1] <- -9
mya
'[<-.my' <- function(x, i, value){
x <- x[i] + value
return(x)
}
mya <- my(1:2)
mya[1] <- -9
mya
'[<-.my' <- function(x, i, value){
x[i] <- x[i] + value
return(x)
}
mya <- my(1:2)
mya[1] <- -9
'[<-.my' <- function(x, i, value){
browser()
x[i] <- x[i] + value
return(x)
}
mya <- my(1:2)
mya[1] <- -9
x
value
i
x[i]
x[i] + value
'[<-.my' <- function(x, i, value){
b <- x
browser()
b[i] <- x[i] + value
return(b)
}
mya <- my(1:2)
mya[1] <- -9
b[i]
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(x, i, value){
Data <- x
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i)))
}
return(Data)
}
aa[2] <- b
phm(aa,2,b)
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
phm(aa,2,b)
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
phm(aa,2,b)
b
phm(aa,2,b)
b <- list(mt = list(d = -9))
phm(aa,2,b)
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
phm(aa,2,b)
INa
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
INa
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
j
dim(parse(text = paste0("Data$",INa[j])))
parse(text = paste0("Data$",INa[j]))
a$mt <- list(d = array(1,2), b = matrix(1:6, 2, 3))
a$en <- list(d = array(1:18,c(2,3,3)), b = matrix(1:6, 2, 3))
aa <- a
aa[2] <- b
phm(aa,2,b)
j
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
dimN
dim(parse(text = paste0("Data$",INa[j])))
DaNa
Data
b
phm(aa,2,b)
DaNa
Data
PutData
PutData
Data
eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j]))
Data
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
Data
parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("PutData$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
parse(text = paste0("PutData$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
phm(aa,2,b)
phm <- function(Data, i, value){
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
phm(aa,2,b)
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param x the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
aa <- a
aa
aa[2] <- b
aa
document()
document()
