browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
Data
parse(text = paste0("putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("PutData$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
parse(text = paste0("PutData$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")"))
phm <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "PutData$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
browser()
return(Data)
}
phm(aa,2,b)
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in 1:length(INa)){
dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
phm(aa,2,b)
phm <- function(Data, i, value){
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
phm(aa,2,b)
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param x the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in 1:length(INa)) {
eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
aa <- a
aa
aa[2] <- b
aa
document()
document()
a <- list(a = 1, b = 2)
aName <- names(a)
b <- list(a = -1, b = -2)
a[aName] <- b[aName]
a
a <- list(a = 1, b = 2)
aName <- names(a)
b <- list(d = -1, b = -2)
bName <- names(b)
dNam <- setdiff(aName, bName)
dNam
dNam <- setdiff(bName, aName)
dNam
a[dNam] <- b[dNam]
a
mergeData.hm.list <- function(Ori, New){
OrNa <- names(Ori)
NeNa <- names(New)
INa <- intersect(OrNa, NeNa)
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
Ori[DNNa] <- New[DNNa]
for(i in INa){
Ori[i] <- mergeList(Ori[i], New[i])
}
return(Ori)
}
mergeList <- function(Ori, New){
OrNa <- names(Ori)
NeNa <- names(New)
INa <- intersect(OrNa, NeNa)
DONa <- setdiff(OrNa, NeNa)
DNNa <- setdiff(NeNa, OrNa)
Ori[DNNa] <- New[DNNa]
for(i in INa){
Ori[i] <- New[i]
}
return(Ori)
}
a <- list(a = 1, b = 2)
class(a) <- "hm.list"
a[1]
a <- list(a = c(1:2), b = matrix(1:6,2,3))
class(a) <- "hm.list"
a[1]
a["a"]
a <- list(a = c(1:2), b = matrix(1:6,2,3))
a["a"]
a <- list(a = c(1:2), b = matrix(1:6,2,3))
class(a) <- "hm.list"
a <- list(a = c(1:2), b = matrix(1:6,2,3))
class(a) <- "hm.list"
a["a"]
class(a)
a[1]
str(a)
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1]
a[1] <- a[2]
a[1] <- a[2]
putList
a[1] <- a[2]
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
Data[j] <- putList(value[j], Data[j], i)
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
Data[j] <- putList(value[j], Data[j], i)
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a[1]
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
str(a)
a[1]
a[2]
a[1] <- a[2]
str(a)
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(PutData, Data, i){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
str(a)
Data
PutData
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[j] <- putList(value[j], Data[j], i)
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
str(a)
class(a) <- "hm.list"
str(a)
a[1] <- a[2]
value[j]
Data[j]
putList(value[j], Data[j], i)
PutData
Data
Data[j]
i
j
putList(value[j], Data[j], i)
PutData
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[j] <- putList(Data[j], i, value[j])
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data
value
i
Data[j]
value[j]
value
Data
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
for(j in INa){
dimN <- length(dim(Data[j]))
if(dimN == 2) Data[j][i,] <- PutData[j]
else if(dimN == 3) Data[j][i,,] <- PutData[j]
else Data[j][i] <- PutData[j]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data[j]
value[j]
Data
PutData
INa
DaNa
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @param Data the data, from it get the required data
#' @param i index
#' @param PutData PutData
#' @return Locat whith the required data
#' @export
putList <- function(Data, i, PutData){
DaNa <- names(Data)
PuNa <- names(PutData)
INa <- intersect(DaNa,PuNa)
browser()
for(j in INa){
dimN <- length(dim(Data[[j]]))
if(dimN == 2) Data[[j]][i,] <- PutData[[j]]
else if(dimN == 3) Data[[j]][i,,] <- PutData[[j]]
else Data[[j]][i] <- PutData[[j]]
# dimN <- length(dim(parse(text = paste0("Data$",INa[j]))))
# if(dimN == 2) eval(parse(text = paste0("Data$", INa[j], "[i,]", " <- ", "PutData$", INa[j])))
# else if(dimN == 3) eval(parse(text = paste0("Data$", INa[j], "[i,,]", " <- ", "PutData$", INa[j])))
# else eval(parse(text = paste0("Data$", INa[j], "[i]", " <- ", "PutData$", INa[j])))
}
browser()
return(Data)
}
#' @title putData.list
#' @description Extract the data required by Locat in Data for list
#' @import purrr
#' @param Data the data, from it get the required data
#' @param i index
#' @param value value
#' @return Locat whith the required data
#' @export
'[<-.hm.list' <- function(Data, i, value){
class(Data) <- "list"
class(value) <- "list"
DaNa <- names(Data)
PuNa <- names(value)
INa <- intersect(DaNa,PuNa)
# indexPI <- as.integer(map(INa, function(a, b)which(b %in% a), PuNa))
# PutData <- PutData[indexPI]
for (j in INa) {
browser()
Data[[j]] <- putList(Data[[j]], i, value[[j]])
# eval(parse(text = paste0("Data$", INa[j], " <- ", "putList(", "value$", INa[j], ",", "Data$", INa[j], ",", i,")")))
}
class(Data) <- "hm.list"
return(Data)
}
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
Data[[j]]
value[[j]]
Data
PutData
INa
str(a)
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
class(a) <- "hm.list"
a[1] <- a[2]
a <- list(a = list(a = c(1:2), b = matrix(1:6,2,3)))
a[1]
a[[1]]
class(a) <- "hm.list"
a[1]
document()
library(devtools)
document()
library(HMtools)
library(devtools)
document()
library(HMtools)
document()
document()
library(HMtools)
document()
library(HMtools)
rasterToPoints
cut
library(devtools)
document()
document()
document()
document()
document()
document()
library(HMtools)
library(HMtools)
library(HMtools)
library(HMtools)
fctNextGrid
library(devtools)
document()
library(HMtools)
fctNextGrid
library(devtools)
document()
document()
document()
library(HMtools)
remove.packages("PackageDemo")
install.packages("devtools")
# install.packages("devtools")
library(devtools)
install_github("IWMHUST/PackageDemo")
library(PackageDemo)
sayHello()
sayHello("lk")
detach("package:PackageDemo", unload = TRUE)
